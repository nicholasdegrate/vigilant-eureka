{"ast":null,"code":"import _slicedToArray from \"/Users/nicholasdegrate/Desktop/uplift-challenge/uplift-interview-nicholas-degrate/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/nicholasdegrate/Desktop/uplift-challenge/uplift-interview-nicholas-degrate/frontend/src/provider/DeckProvider.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { createDeckOfCards } from '../helpers/createDeckOfCards';\nimport { remainingAces } from '../helpers/remainingAces';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initialState = {\n  deck: [],\n  cardStack: [],\n  acesRemaining: 0,\n  gameStatus: 'playing'\n};\nexport var DeckContext = /*#__PURE__*/createContext(initialState);\nexport var DeckProvider = function DeckProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(function () {\n    return createDeckOfCards();\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      deck = _useState2$.deck,\n      cardStack = _useState2$.cardStack,\n      acesRemaining = _useState2$.acesRemaining,\n      gameStatus = _useState2$.gameStatus,\n      setDeck = _useState2[1];\n\n  var pickedDeck = function pickedDeck() {\n    setDeck(function (_ref2) {\n      var deck = _ref2.deck,\n          gameStatus = _ref2.gameStatus;\n      var aces = remainingAces(deck);\n      var stack = deck.splice(0, 5);\n\n      if (deck.length > 5 && aces === 0) {\n        gameStatus = 'game over';\n      } else if (!deck.length && aces > 0) {\n        gameStatus = 'winner';\n      } else if (!deck.length && aces === 0) {\n        gameStatus = 'lose';\n      }\n\n      return {\n        acesRemaining: aces,\n        cardStack: stack,\n        deck: deck,\n        gameStatus: gameStatus\n      };\n    });\n  };\n\n  var resetGame = function resetGame() {\n    setDeck(function () {\n      return createDeckOfCards();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(DeckContext.Provider, {\n    value: {\n      deck: deck,\n      cardStack: cardStack,\n      pickedDeck: pickedDeck,\n      resetGame: resetGame,\n      acesRemaining: acesRemaining,\n      gameStatus: gameStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DeckProvider, \"qgQc7RF9nMajCawTATF0b78df1A=\");\n\n_c = DeckProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckProvider\");","map":{"version":3,"sources":["/Users/nicholasdegrate/Desktop/uplift-challenge/uplift-interview-nicholas-degrate/frontend/src/provider/DeckProvider.tsx"],"names":["createContext","useState","createDeckOfCards","remainingAces","initialState","deck","cardStack","acesRemaining","gameStatus","DeckContext","DeckProvider","children","setDeck","pickedDeck","aces","stack","splice","length","resetGame"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,aAAT,QAA8B,0BAA9B;;AAYA,IAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE,EAD+B;AAErCC,EAAAA,SAAS,EAAE,EAF0B;AAGrCC,EAAAA,aAAa,EAAE,CAHsB;AAIrCC,EAAAA,UAAU,EAAE;AAJyB,CAAvC;AAOA,OAAO,IAAMC,WAAW,gBAAGT,aAAa,CAAmBI,YAAnB,CAAjC;AAEP,OAAO,IAAMM,YAA+B,GAAG,SAAlCA,YAAkC,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC/D,kBAAkEV,QAAQ,CAAC;AAAA,WACzEC,iBAAiB,EADwD;AAAA,GAAD,CAA1E;AAAA;AAAA;AAAA,MAASG,IAAT,eAASA,IAAT;AAAA,MAAeC,SAAf,eAAeA,SAAf;AAAA,MAA0BC,aAA1B,eAA0BA,aAA1B;AAAA,MAAyCC,UAAzC,eAAyCA,UAAzC;AAAA,MAAuDI,OAAvD;;AAIA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBD,IAAAA,OAAO,CAAC,iBAA0B;AAAA,UAAvBP,IAAuB,SAAvBA,IAAuB;AAAA,UAAjBG,UAAiB,SAAjBA,UAAiB;AAChC,UAAMM,IAAI,GAAGX,aAAa,CAACE,IAAD,CAA1B;AACA,UAAMU,KAAK,GAAGV,IAAI,CAACW,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAd;;AAEA,UAAIX,IAAI,CAACY,MAAL,GAAc,CAAd,IAAmBH,IAAI,KAAK,CAAhC,EAAmC;AACjCN,QAAAA,UAAU,GAAG,WAAb;AACD,OAFD,MAEO,IAAI,CAACH,IAAI,CAACY,MAAN,IAAgBH,IAAI,GAAG,CAA3B,EAA8B;AACnCN,QAAAA,UAAU,GAAG,QAAb;AACD,OAFM,MAEA,IAAI,CAACH,IAAI,CAACY,MAAN,IAAgBH,IAAI,KAAK,CAA7B,EAAgC;AACrCN,QAAAA,UAAU,GAAG,MAAb;AACD;;AAED,aAAO;AACLD,QAAAA,aAAa,EAAEO,IADV;AAELR,QAAAA,SAAS,EAAES,KAFN;AAGLV,QAAAA,IAAI,EAAJA,IAHK;AAILG,QAAAA,UAAU,EAAVA;AAJK,OAAP;AAMD,KAlBM,CAAP;AAmBD,GApBD;;AAsBA,MAAMU,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBN,IAAAA,OAAO,CAAC;AAAA,aAAMV,iBAAiB,EAAvB;AAAA,KAAD,CAAP;AACD,GAFD;;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,SAAS,EAATA,SAAR;AAAmBO,MAAAA,UAAU,EAAVA,UAAnB;AAA+BK,MAAAA,SAAS,EAATA,SAA/B;AAA0CX,MAAAA,aAAa,EAAbA,aAA1C;AAAyDC,MAAAA,UAAU,EAAVA;AAAzD,KADT;AAAA,cAGGG;AAHH;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAtCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, FunctionComponent, useState } from 'react';\nimport { createDeckOfCards } from '../helpers/createDeckOfCards';\nimport { remainingAces } from '../helpers/remainingAces';\nimport { CardStack } from '../types/global';\n\nexport interface DeckInitialState {\n  deck: CardStack;\n  cardStack: CardStack;\n  acesRemaining: number;\n  pickedDeck?(): void;\n  resetGame?(): void;\n  gameStatus: 'game over' | 'lose' | 'winner' | 'playing';\n}\n\nconst initialState: DeckInitialState = {\n  deck: [],\n  cardStack: [],\n  acesRemaining: 0,\n  gameStatus: 'playing',\n};\n\nexport const DeckContext = createContext<DeckInitialState>(initialState);\n\nexport const DeckProvider: FunctionComponent = ({ children }) => {\n  const [{ deck, cardStack, acesRemaining, gameStatus }, setDeck] = useState(() =>\n    createDeckOfCards()\n  );\n\n  const pickedDeck = () => {\n    setDeck(({ deck, gameStatus }) => {\n      const aces = remainingAces(deck);\n      const stack = deck.splice(0, 5);\n\n      if (deck.length > 5 && aces === 0) {\n        gameStatus = 'game over';\n      } else if (!deck.length && aces > 0) {\n        gameStatus = 'winner';\n      } else if (!deck.length && aces === 0) {\n        gameStatus = 'lose';\n      }\n\n      return {\n        acesRemaining: aces,\n        cardStack: stack,\n        deck,\n        gameStatus,\n      };\n    });\n  };\n\n  const resetGame = () => {\n    setDeck(() => createDeckOfCards());\n  };\n\n  return (\n    <DeckContext.Provider\n      value={{ deck, cardStack, pickedDeck, resetGame, acesRemaining, gameStatus }}\n    >\n      {children}\n    </DeckContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}