{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/nicholasdegrate/Desktop/uplift-challenge/uplift-interview-nicholas-degrate/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { NAMES, SUITS } from '../constants/global';\nimport { remainingAces } from './remainingAces';\nimport { shuffledDeck } from './shuffledDeck';\nexport function createDeckOfCards() {\n  var deck = [];\n\n  var _iterator = _createForOfIteratorHelper(NAMES),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var name = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(SUITS),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var suit = _step2.value;\n          var card = {\n            name: name,\n            suit: suit\n          };\n          deck.push(card);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var initialDeck = shuffledDeck(deck);\n  return {\n    acesRemaining: remainingAces(initialDeck),\n    cardStack: initialDeck.splice(0, 5),\n    deck: initialDeck,\n    gameStatus: 'playing'\n  };\n}","map":{"version":3,"sources":["/Users/nicholasdegrate/Desktop/uplift-challenge/uplift-interview-nicholas-degrate/frontend/src/helpers/createDeckOfCards.ts"],"names":["NAMES","SUITS","remainingAces","shuffledDeck","createDeckOfCards","deck","name","suit","card","push","initialDeck","acesRemaining","cardStack","splice","gameStatus"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,qBAA7B;AAGA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAClC,MAAMC,IAAe,GAAG,EAAxB;;AADkC,6CAGfL,KAHe;AAAA;;AAAA;AAGlC,wDAA0B;AAAA,UAAfM,IAAe;;AAAA,kDACLL,KADK;AAAA;;AAAA;AACxB,+DAA0B;AAAA,cAAfM,IAAe;AACxB,cAAMC,IAAI,GAAG;AAAEF,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,IAAI,EAAJA;AAAR,WAAb;AACAF,UAAAA,IAAI,CAACI,IAAL,CAAUD,IAAV;AACD;AAJuB;AAAA;AAAA;AAAA;AAAA;AAKzB;AARiC;AAAA;AAAA;AAAA;AAAA;;AAUlC,MAAME,WAAW,GAAGP,YAAY,CAACE,IAAD,CAAhC;AAEA,SAAO;AACLM,IAAAA,aAAa,EAAET,aAAa,CAACQ,WAAD,CADvB;AAELE,IAAAA,SAAS,EAAEF,WAAW,CAACG,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB,CAFN;AAGLR,IAAAA,IAAI,EAAEK,WAHD;AAILI,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD","sourcesContent":["import { NAMES, SUITS } from '../constants/global';\nimport { DeckInitialState } from '../provider/DeckProvider';\nimport { CardStack } from '../types/global';\nimport { remainingAces } from './remainingAces';\nimport { shuffledDeck } from './shuffledDeck';\n\nexport function createDeckOfCards() {\n  const deck: CardStack = [];\n\n  for (const name of NAMES) {\n    for (const suit of SUITS) {\n      const card = { name, suit };\n      deck.push(card);\n    }\n  }\n\n  const initialDeck = shuffledDeck(deck);\n\n  return {\n    acesRemaining: remainingAces(initialDeck),\n    cardStack: initialDeck.splice(0, 5),\n    deck: initialDeck,\n    gameStatus: 'playing',\n  } as Omit<DeckInitialState, 'pickedDeck' | 'resetGame'>;\n}\n"]},"metadata":{},"sourceType":"module"}